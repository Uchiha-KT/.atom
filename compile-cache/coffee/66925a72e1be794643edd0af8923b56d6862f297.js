
/*
  Atom-terminal-panel
  Copyright by isis97
  MIT licensed

  The very basic class, which handles the configuration files, loads up commands and
  answers all the commands requests generated by terminal instance.
 */

(function() {
  var ATPCore, dirname, extname, fs, ref, resolve;

  ref = include('path'), resolve = ref.resolve, dirname = ref.dirname, extname = ref.extname;

  fs = include('fs');

  ATPCore = (function() {
    function ATPCore() {}

    ATPCore.prototype.state = {
      config: {},
      statePath: null,
      opened: false,
      customCommands: {},
      defaultCommands: {
        "hello_world": {
          "description": "Prints the hello world message to the terminal output.",
          "command": ["echo Hello world :D", "echo This is", "echo example usage", "echo of the console"]
        }
      }
    };

    ATPCore.prototype.createDefaultCommandsFile = function() {
      var content, e, initialContent;
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        try {
          initialContent = {
            '_comment': 'Package atom-terminal-panel: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.',
            commands: this.state.defaultCommands,
            actions: [],
            toolbar: [["clear", "clear", "Clears the console output."], ["info", "info", "Prints the terminal welcome message."], ["all available commands", "memdump", "Displays all available builtin commands. (all commands except native)"]],
            rules: {
              "\\b[A-Z][A-Z]+\\b": {
                'match': {
                  'flags': ['g']
                },
                'css': {
                  'color': 'gray'
                }
              },
              '(error|err):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:error:text:Error) %(0)'
                },
                'css': {
                  'color': 'red',
                  'font-weight': 'bold'
                }
              },
              '(warning|warn|alert):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:warning:text:Warning) %(0)'
                },
                'css': {
                  'color': 'yellow'
                }
              },
              '(note|info):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:info:text:Info) %(0)'
                },
                'css': {}
              },
              '(debug|dbg):? (.*)': {
                'match': {
                  'matchLine': true,
                  'replace': '%(label:default:text:Debug) %(0)'
                },
                'css': {
                  'color': 'gray'
                }
              }
            }
          };
          content = JSON.stringify(initialContent, null, '\t');
          return fs.writeFileSync(this.state.statePath, content);
        } catch (error) {
          e = error;
          return console.log('atp-core cannot create default terminal commands JSON file', e.message);
        }
      }
    };

    ATPCore.prototype.reload = function() {
      this.state.opended = false;
      return this.init();
    };

    ATPCore.prototype.init = function() {
      var e;
      if (!this.state.opended) {
        this.state.opened = true;
        this.state.statePath = dirname(atom.config.getUserConfigPath()) + '/terminal-commands.json';
        try {
          this.state.config = JSON.parse(fs.readFileSync(this.state.statePath));
        } catch (error) {
          e = error;
          console.log('atp-core cannot reload terminal config file: invalid content', e.message);
          atom.notifications.addWarning("atom-terminal-panel: Could not load the config file. The new file will be created. Reason: " + e.message);
          this.state.opened = false;
        }
        if (!this.state.opened) {
          this.createDefaultCommandsFile();
          this.state.opened = true;
          this.state.customCommands = this.state.defaultCommands;
        } else {
          this.state.customCommands = this.state.config.commands;
        }
      }
      return this;
    };

    ATPCore.prototype.jsonCssToInlineStyle = function(obj) {
      var key, ret, value;
      if (obj instanceof String) {
        return obj;
      }
      ret = '';
      for (key in obj) {
        value = obj[key];
        if ((key != null) && (value != null)) {
          ret += key + ':' + value + ';';
        }
      }
      return ret;
    };

    ATPCore.prototype.getConfig = function() {
      return this.state.config;
    };

    ATPCore.prototype.getUserCommands = function() {
      if (atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return this.state.customCommands;
      }
      return null;
    };

    ATPCore.prototype.findUserCommandAction = function(cmd) {
      var code, name, ref1;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      ref1 = this.state.customCommands;
      for (name in ref1) {
        code = ref1[name];
        if (name === cmd) {
          if (code.command != null) {
            return code.command;
          }
          return code;
        }
      }
      return null;
    };

    ATPCore.prototype.findUserCommand = function(cmd) {
      var action;
      if (!atom.config.get('atom-terminal-panel.enableUserCommands')) {
        return null;
      }
      action = this.findUserCommandAction(cmd);
      if (action == null) {
        return null;
      }
      return function(state, args) {
        return state.execDelayedCommand(1, action, args, state);
      };
    };

    return ATPCore;

  })();

  module.exports = new ATPCore().init();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
