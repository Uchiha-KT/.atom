
/*
  == ATOM-TERMINAL-PANEL  HELPERS PLUGIN ==

  Atom-terminal-panel builtin plugin v1.0.0
  -isis97

  Contains helper commands (mainly for C/C++ compilation/testing).
  These commands are defined just for testing purposes.
  You can remove this file safely.

  MIT License
  Feel free to do anything with this file.
 */

(function() {
  module.exports = {
    "compile": {
      "description": "Compiles the currently opened C/C++ file using g++.",
      "command": function(state, args) {
        var ADDITIONAL_FLAGS, COMPILER_FLAGS, COMPILER_NAME, SOURCE_FILE, TARGET_FILE;
        SOURCE_FILE = state.getCurrentFilePath();
        COMPILER_NAME = 'g++';
        COMPILER_FLAGS = ' -lm -std=c++0x -O2 -m32 -Wl,--oformat,pei-i386 -Wall' + ' -W -Wextra -Wdouble-promotion -pedantic -Wmissing-include-dirs' + ' -Wunused -Wuninitialized -Wextra -Wstrict-overflow=3 -Wtrampolines' + ' -Wfloat-equal -Wconversion -Wmissing-field-initializers -Wno-multichar' + ' -Wpacked -Winline -Wshadow';
        TARGET_FILE = SOURCE_FILE + ".exe";
        TARGET_FILE = state.replaceAll('.cpp', '', TARGET_FILE);
        TARGET_FILE = state.replaceAll('.c', '', TARGET_FILE);
        ADDITIONAL_FLAGS = "";
        state.exec(COMPILER_NAME + " " + COMPILER_FLAGS + " \"" + SOURCE_FILE + "\" -o \"" + TARGET_FILE + "\" " + ADDITIONAL_FLAGS, args, state);
        return "";
      }
    },
    "run": {
      "params": "[name]",
      "description": "! Only for testing purposes. (meaningless). Runs the [name].exe file.",
      "command": function(state, args) {
        var SOURCE_FILE, TARGET_FILE;
        SOURCE_FILE = state.getCurrentFilePath();
        TARGET_FILE = SOURCE_FILE + ".exe";
        return state.exec("\"" + TARGET_FILE + "\"", args, state);
      }
    },
    "test": {
      "params": "[name]",
      "description": "Tests the specified file with the input file. (executes [name].exe < [name])",
      "command": function(state, args) {
        var app_file, app_name_match, app_name_matcher, test_file;
        test_file = args[0];
        app_name_matcher = /([^0-9])*/ig;
        app_name_match = app_name_matcher.exec(test_file);
        app_file = app_name_match[0] + '.exe';
        state.execDelayedCommand('250', app_file + " < " + test_file);
        return 'Probing application input ' + state.consoleLink(app_file) + ' < ' + state.consoleLink(test_file);
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9DOi9Vc2Vycy91Y2hpaGEvLmF0b20vcGFja2FnZXMvYXRvbS10ZXJtaW5hbC1wYW5lbC9jb21tYW5kcy9oZWxwZXJzL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBQUE7RUFhQSxNQUFNLENBQUMsT0FBUCxHQUNFO0lBQUEsU0FBQSxFQUNFO01BQUEsYUFBQSxFQUFlLHFEQUFmO01BQ0EsU0FBQSxFQUFXLFNBQUMsS0FBRCxFQUFRLElBQVI7QUFDVCxZQUFBO1FBQUEsV0FBQSxHQUFjLEtBQUssQ0FBQyxrQkFBTixDQUFBO1FBQ2QsYUFBQSxHQUFnQjtRQUNoQixjQUFBLEdBQWlCLHVEQUFBLEdBQ2hCLGlFQURnQixHQUVoQixxRUFGZ0IsR0FHaEIseUVBSGdCLEdBSWhCO1FBQ0QsV0FBQSxHQUFpQixXQUFELEdBQWE7UUFDN0IsV0FBQSxHQUFjLEtBQUssQ0FBQyxVQUFOLENBQWlCLE1BQWpCLEVBQXlCLEVBQXpCLEVBQTZCLFdBQTdCO1FBQ2QsV0FBQSxHQUFjLEtBQUssQ0FBQyxVQUFOLENBQWlCLElBQWpCLEVBQXVCLEVBQXZCLEVBQTJCLFdBQTNCO1FBQ2QsZ0JBQUEsR0FBbUI7UUFDbkIsS0FBSyxDQUFDLElBQU4sQ0FBYyxhQUFELEdBQWUsR0FBZixHQUFrQixjQUFsQixHQUFpQyxLQUFqQyxHQUFzQyxXQUF0QyxHQUFrRCxVQUFsRCxHQUE0RCxXQUE1RCxHQUF3RSxLQUF4RSxHQUE2RSxnQkFBMUYsRUFBOEcsSUFBOUcsRUFBb0gsS0FBcEg7QUFDQSxlQUFPO01BYkUsQ0FEWDtLQURGO0lBaUJBLEtBQUEsRUFDRTtNQUFBLFFBQUEsRUFBVSxRQUFWO01BQ0EsYUFBQSxFQUFlLHVFQURmO01BRUEsU0FBQSxFQUFXLFNBQUMsS0FBRCxFQUFRLElBQVI7QUFDVCxZQUFBO1FBQUEsV0FBQSxHQUFjLEtBQUssQ0FBQyxrQkFBTixDQUFBO1FBQ2QsV0FBQSxHQUFpQixXQUFELEdBQWE7QUFDN0IsZUFBTyxLQUFLLENBQUMsSUFBTixDQUFXLElBQUEsR0FBSyxXQUFMLEdBQWlCLElBQTVCLEVBQWlDLElBQWpDLEVBQXVDLEtBQXZDO01BSEUsQ0FGWDtLQWxCRjtJQXlCQSxNQUFBLEVBQ0U7TUFBQSxRQUFBLEVBQVUsUUFBVjtNQUNBLGFBQUEsRUFBZSw4RUFEZjtNQUVBLFNBQUEsRUFBVyxTQUFDLEtBQUQsRUFBUSxJQUFSO0FBQ1QsWUFBQTtRQUFBLFNBQUEsR0FBWSxJQUFLLENBQUEsQ0FBQTtRQUNqQixnQkFBQSxHQUFtQjtRQUNuQixjQUFBLEdBQWlCLGdCQUFnQixDQUFDLElBQWpCLENBQXNCLFNBQXRCO1FBQ2pCLFFBQUEsR0FBVyxjQUFlLENBQUEsQ0FBQSxDQUFmLEdBQW9CO1FBQy9CLEtBQUssQ0FBQyxrQkFBTixDQUF5QixLQUF6QixFQUFtQyxRQUFELEdBQVUsS0FBVixHQUFlLFNBQWpEO0FBQ0EsZUFBTyw0QkFBQSxHQUErQixLQUFLLENBQUMsV0FBTixDQUFrQixRQUFsQixDQUEvQixHQUE2RCxLQUE3RCxHQUFxRSxLQUFLLENBQUMsV0FBTixDQUFrQixTQUFsQjtNQU5uRSxDQUZYO0tBMUJGOztBQWRGIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4gID09IEFUT00tVEVSTUlOQUwtUEFORUwgIEhFTFBFUlMgUExVR0lOID09XG5cbiAgQXRvbS10ZXJtaW5hbC1wYW5lbCBidWlsdGluIHBsdWdpbiB2MS4wLjBcbiAgLWlzaXM5N1xuXG4gIENvbnRhaW5zIGhlbHBlciBjb21tYW5kcyAobWFpbmx5IGZvciBDL0MrKyBjb21waWxhdGlvbi90ZXN0aW5nKS5cbiAgVGhlc2UgY29tbWFuZHMgYXJlIGRlZmluZWQganVzdCBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgWW91IGNhbiByZW1vdmUgdGhpcyBmaWxlIHNhZmVseS5cblxuICBNSVQgTGljZW5zZVxuICBGZWVsIGZyZWUgdG8gZG8gYW55dGhpbmcgd2l0aCB0aGlzIGZpbGUuXG4jIyNcbm1vZHVsZS5leHBvcnRzID1cbiAgXCJjb21waWxlXCI6XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbXBpbGVzIHRoZSBjdXJyZW50bHkgb3BlbmVkIEMvQysrIGZpbGUgdXNpbmcgZysrLlwiXG4gICAgXCJjb21tYW5kXCI6IChzdGF0ZSwgYXJncyktPlxuICAgICAgU09VUkNFX0ZJTEUgPSBzdGF0ZS5nZXRDdXJyZW50RmlsZVBhdGgoKVxuICAgICAgQ09NUElMRVJfTkFNRSA9ICdnKysnXG4gICAgICBDT01QSUxFUl9GTEFHUyA9ICcgLWxtIC1zdGQ9YysrMHggLU8yIC1tMzIgLVdsLC0tb2Zvcm1hdCxwZWktaTM4NiAtV2FsbCcgK1xuICAgICAgICcgLVcgLVdleHRyYSAtV2RvdWJsZS1wcm9tb3Rpb24gLXBlZGFudGljIC1XbWlzc2luZy1pbmNsdWRlLWRpcnMnICtcbiAgICAgICAnIC1XdW51c2VkIC1XdW5pbml0aWFsaXplZCAtV2V4dHJhIC1Xc3RyaWN0LW92ZXJmbG93PTMgLVd0cmFtcG9saW5lcycgK1xuICAgICAgICcgLVdmbG9hdC1lcXVhbCAtV2NvbnZlcnNpb24gLVdtaXNzaW5nLWZpZWxkLWluaXRpYWxpemVycyAtV25vLW11bHRpY2hhcicgK1xuICAgICAgICcgLVdwYWNrZWQgLVdpbmxpbmUgLVdzaGFkb3cnXG4gICAgICBUQVJHRVRfRklMRSA9IFwiI3tTT1VSQ0VfRklMRX0uZXhlXCJcbiAgICAgIFRBUkdFVF9GSUxFID0gc3RhdGUucmVwbGFjZUFsbCAnLmNwcCcsICcnLCBUQVJHRVRfRklMRVxuICAgICAgVEFSR0VUX0ZJTEUgPSBzdGF0ZS5yZXBsYWNlQWxsICcuYycsICcnLCBUQVJHRVRfRklMRVxuICAgICAgQURESVRJT05BTF9GTEFHUyA9IFwiXCJcbiAgICAgIHN0YXRlLmV4ZWMgXCIje0NPTVBJTEVSX05BTUV9ICN7Q09NUElMRVJfRkxBR1N9IFxcXCIje1NPVVJDRV9GSUxFfVxcXCIgLW8gXFxcIiN7VEFSR0VUX0ZJTEV9XFxcIiAje0FERElUSU9OQUxfRkxBR1N9XCIsIGFyZ3MsIHN0YXRlXG4gICAgICByZXR1cm4gXCJcIlxuXG4gIFwicnVuXCI6XG4gICAgXCJwYXJhbXNcIjogXCJbbmFtZV1cIlxuICAgIFwiZGVzY3JpcHRpb25cIjogXCIhIE9ubHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuIChtZWFuaW5nbGVzcykuIFJ1bnMgdGhlIFtuYW1lXS5leGUgZmlsZS5cIlxuICAgIFwiY29tbWFuZFwiOiAoc3RhdGUsIGFyZ3MpLT5cbiAgICAgIFNPVVJDRV9GSUxFID0gc3RhdGUuZ2V0Q3VycmVudEZpbGVQYXRoKClcbiAgICAgIFRBUkdFVF9GSUxFID0gXCIje1NPVVJDRV9GSUxFfS5leGVcIlxuICAgICAgcmV0dXJuIHN0YXRlLmV4ZWMgXCJcXFwiI3tUQVJHRVRfRklMRX1cXFwiXCIsIGFyZ3MsIHN0YXRlXG5cbiAgXCJ0ZXN0XCI6XG4gICAgXCJwYXJhbXNcIjogXCJbbmFtZV1cIlxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUZXN0cyB0aGUgc3BlY2lmaWVkIGZpbGUgd2l0aCB0aGUgaW5wdXQgZmlsZS4gKGV4ZWN1dGVzIFtuYW1lXS5leGUgPCBbbmFtZV0pXCJcbiAgICBcImNvbW1hbmRcIjogKHN0YXRlLCBhcmdzKS0+XG4gICAgICB0ZXN0X2ZpbGUgPSBhcmdzWzBdXG4gICAgICBhcHBfbmFtZV9tYXRjaGVyID0gLyhbXjAtOV0pKi9pZ1xuICAgICAgYXBwX25hbWVfbWF0Y2ggPSBhcHBfbmFtZV9tYXRjaGVyLmV4ZWModGVzdF9maWxlKVxuICAgICAgYXBwX2ZpbGUgPSBhcHBfbmFtZV9tYXRjaFswXSArICcuZXhlJ1xuICAgICAgc3RhdGUuZXhlY0RlbGF5ZWRDb21tYW5kICcyNTAnLCBcIiN7YXBwX2ZpbGV9IDwgI3t0ZXN0X2ZpbGV9XCJcbiAgICAgIHJldHVybiAnUHJvYmluZyBhcHBsaWNhdGlvbiBpbnB1dCAnICsgc3RhdGUuY29uc29sZUxpbmsoYXBwX2ZpbGUpICsgJyA8ICcgKyBzdGF0ZS5jb25zb2xlTGluayh0ZXN0X2ZpbGUpXG4iXX0=
