'use babel';

var __hasProp = ({}).hasOwnProperty,
    __extends = function __extends(child, parent) {
  for (var key in parent) {
    if (__hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    fs = require('fs-plus'),
    path = require('path'),
    Model = require('theorist').Model;

module.exports = File = (function (parent) {
  __extends(File, parent);

  File.properties({
    parent: null,
    name: '',
    client: null,
    status: 0,
    size: 0,
    date: null,
    type: null
  });

  File.prototype.accessor('local', function () {
    if (this.parent) {
      return path.normalize(path.join(this.parent.local, this.name)).replace(/\\/g, '/');
    }
    throw 'File needs to be in a Directory';
  });

  File.prototype.accessor('remote', function () {
    if (this.parent) {
      return path.normalize(path.join(this.parent.remote, this.name)).replace(/\\/g, '/');
    }
    throw 'File needs to be in a Directory';
  });

  File.prototype.accessor('root', function () {
    if (this.parent) {
      return this.parent.root;
    }
    return this;
  });

  function File() {
    File.__super__.constructor.apply(this, arguments);

    var ext = path.extname(this.name);
    if (fs.isReadmePath(this.name)) {
      this.type = 'readme';
    } else if (fs.isCompressedExtension(ext)) {
      this.type = 'compressed';
    } else if (fs.isImageExtension(ext)) {
      this.type = 'image';
    } else if (fs.isPdfExtension(ext)) {
      this.type = 'pdf';
    } else if (fs.isBinaryExtension(ext)) {
      this.type = 'binary';
    } else {
      this.type = 'text';
    }
  }

  File.prototype.open = function () {
    var self = this,
        client = self.root.client;

    client.download(self.remote, false, function (err) {
      if (err) {
        atom.notifications.addError('Remote FTP: ' + err, {
          dismissable: false
        });
        return;
      }
      atom.workspace.open(self.local);
    });
  };

  return File;
})(Model);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovVXNlcnMvdWNoaWhhLy5hdG9tL3BhY2thZ2VzL1JlbW90ZS1GVFAvbGliL2ZpbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOztBQUVaLElBQUksU0FBUyxHQUFHLENBQUEsR0FBRSxDQUFDLGNBQWM7SUFDL0IsU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFhLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFBRSxPQUFLLElBQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtBQUFFLFFBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUFFLEFBQUMsU0FBUyxJQUFJLEdBQUc7QUFBRSxRQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztHQUFFLEFBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEFBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLEFBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEFBQUMsT0FBTyxLQUFLLENBQUM7Q0FBRTtJQUNsUyxFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN2QixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN0QixLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFcEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUksQ0FBQSxVQUFVLE1BQU0sRUFBRTtBQUN6QyxXQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDOztBQUV4QixNQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2QsVUFBTSxFQUFFLElBQUk7QUFDWixRQUFJLEVBQUUsRUFBRTtBQUNSLFVBQU0sRUFBRSxJQUFJO0FBQ1osVUFB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QUMsQ0FBQztLQUNqQyxDQUFDLENBQUM7R0FDSixDQUFDOztBQUVGLFNBQU8sSUFBSSxDQUFDO0NBQ2IsQ0FBQSxDQUFDLEtBQUssQ0FBQyxBQUFDLENBQUMiLCJmaWxlIjoiZmlsZTovLy9DOi9Vc2Vycy91Y2hpaGEvLmF0b20vcGFja2FnZXMvUmVtb3RlLUZUUC9saWIvZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5sZXQgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uIChjaGlsZCwgcGFyZW50KSB7IGZvciAoY29uc3Qga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBmcyA9IHJlcXVpcmUoJ2ZzLXBsdXMnKSxcbiAgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKSxcbiAgTW9kZWwgPSByZXF1aXJlKCd0aGVvcmlzdCcpLk1vZGVsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbGUgPSAoZnVuY3Rpb24gKHBhcmVudCkge1xuICBfX2V4dGVuZHMoRmlsZSwgcGFyZW50KTtcblxuICBGaWxlLnByb3BlcnRpZXMoe1xuICAgIHBhcmVudDogbnVsbCxcbiAgICBuYW1lOiAnJyxcbiAgICBjbGllbnQ6IG51bGwsXG4gICAgc3RhdHVzOiAwLFxuICAgIHNpemU6IDAsXG4gICAgZGF0ZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICB9KTtcblxuICBGaWxlLnByb3RvdHlwZS5hY2Nlc3NvcignbG9jYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGFyZW50KVx0XHRcdHsgcmV0dXJuIHBhdGgubm9ybWFsaXplKHBhdGguam9pbih0aGlzLnBhcmVudC5sb2NhbCwgdGhpcy5uYW1lKSkucmVwbGFjZSgvXFxcXC9nLCAnLycpOyB9XG4gICAgdGhyb3cgJ0ZpbGUgbmVlZHMgdG8gYmUgaW4gYSBEaXJlY3RvcnknO1xuICB9KTtcblxuICBGaWxlLnByb3RvdHlwZS5hY2Nlc3NvcigncmVtb3RlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnBhcmVudClcdFx0XHR7IHJldHVybiBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4odGhpcy5wYXJlbnQucmVtb3RlLCB0aGlzLm5hbWUpKS5yZXBsYWNlKC9cXFxcL2csICcvJyk7IH1cbiAgICB0aHJvdyAnRmlsZSBuZWVkcyB0byBiZSBpbiBhIERpcmVjdG9yeSc7XG4gIH0pO1xuXG4gIEZpbGUucHJvdG90eXBlLmFjY2Vzc29yKCdyb290JywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnBhcmVudClcdFx0XHR7IHJldHVybiB0aGlzLnBhcmVudC5yb290OyB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIEZpbGUoKSB7XG4gICAgRmlsZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZSh0aGlzLm5hbWUpO1xuICAgIGlmIChmcy5pc1JlYWRtZVBhdGgodGhpcy5uYW1lKSlcdFx0XHR7IHRoaXMudHlwZSA9ICdyZWFkbWUnOyB9IGVsc2UgaWYgKGZzLmlzQ29tcHJlc3NlZEV4dGVuc2lvbihleHQpKVx0XHRcdHsgdGhpcy50eXBlID0gJ2NvbXByZXNzZWQnOyB9IGVsc2UgaWYgKGZzLmlzSW1hZ2VFeHRlbnNpb24oZXh0KSlcdFx0XHR7IHRoaXMudHlwZSA9ICdpbWFnZSc7IH0gZWxzZSBpZiAoZnMuaXNQZGZFeHRlbnNpb24oZXh0KSlcdFx0XHR7IHRoaXMudHlwZSA9ICdwZGYnOyB9IGVsc2UgaWYgKGZzLmlzQmluYXJ5RXh0ZW5zaW9uKGV4dCkpXHRcdFx0eyB0aGlzLnR5cGUgPSAnYmluYXJ5JzsgfSBlbHNlXHRcdFx0eyB0aGlzLnR5cGUgPSAndGV4dCc7IH1cbiAgfVxuXG4gIEZpbGUucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzLFxuICAgICAgY2xpZW50ID0gc2VsZi5yb290LmNsaWVudDtcblxuICAgIGNsaWVudC5kb3dubG9hZChzZWxmLnJlbW90ZSwgZmFsc2UsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGBSZW1vdGUgRlRQOiAke2Vycn1gLCB7XG4gICAgICAgICAgZGlzbWlzc2FibGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihzZWxmLmxvY2FsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRmlsZTtcbn0oTW9kZWwpKTtcbiJdfQ==